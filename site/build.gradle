
import static groovy.io.FileType.*

buildscript {
    dependencies {
        classpath 'org.asciidoctor:asciidoctorj-diagram:1.5.4.1'
    }

}

//tag::jbakeplugin[]
plugins {
    id 'org.jbake.site' version '5.0.0'
    id "org.aim42.htmlSanityCheck" version "1.1.3"
}
//end::jbakeplugin[]

repositories {
    mavenCentral()
    jcenter()
}

//tag::jbakeconfig[]
jbake {
    version = '2.6.4'
    srcDirName = 'src/main/jbake'
    destDirName = 'docs/html5/site'
    configuration['asciidoctor.option.requires'] = "asciidoctor-diagram"
}
bakePreview {
    port = '8820'
}

//end::jbakeconfig[]

/**
//configure docToolchain to use the main project's config
project('docToolchain') {
    if (project.hasProperty('docDir')) {
        docDir = '../.'
        mainConfigFile = 'Config.groovy'
    } else {
        println "="*80
        println "  please initialize the docToolchain submodule"
        println "  by executing git submodule update -i"
        println "="*80
    }
}
**/

//for 'clean'-task
apply plugin:'java'

htmlSanityCheck {
    sourceDir = new File( "$buildDir/docs/html5/site" )

    // where to put results of sanityChecks...
    checkingResultsDir = new File( "$buildDir/report/htmlchecks" )

    // fail build on errors?
    failOnErrors = false

}
task copyImages1(type:Copy) {
    from("$projectDir/references/dukecon/src/main/asciidoc/images") {}
    into("$buildDir/docs/html5/site/images")
    doLast { println "images copied"}
}
task copyReports(type:Copy) {
    from("$buildDir/report")
    into("$buildDir/docs/html5/site/testreports/")
    println '$buildDir/docs/html5/site/testreports/'
}
task copyResources(
    dependsOn: [copyImages1]
) {
    doLast { println "resources copied"}
}

task buildDocs(
    dependsOn: [copyResources, bake, htmlSanityCheck, copyReports]
) {
    doLast {

    }
}

task prependFilename(
        description: 'crawls through all AsciiDoc files and prepends the name of the current file',
        group: 'docToolchain helper',
) {
    doLast {
        File sourceFolder = new File(projectDir.canonicalPath,"references")
        println("sourceFolder: " + sourceFolder.canonicalPath)
        sourceFolder.traverse(type: FILES) { file ->
            if (file.name ==~ '^.*(ad|adoc|asciidoc)$') {
                if (file.name.split('[.]')[0] in ["feedback", "_feedback", "config", "_config"]) {
                    println "skipped "+file.name
                } else {
                    def text = file.getText('utf-8')
                    def name = file.canonicalPath - sourceFolder.canonicalPath
                    name = name.replace("\\", "/").replaceAll("^/", "")
                    if (text.contains(":filename:")) {
                        text = text.replaceAll(":filename:.*", ":filename: $name")
                        println "updated "+name
                    } else {
                        text = ":filename: $name\n" + text
                        println "added   "+name
                    }
                    file.write(text,'utf-8')
                }
            }
        }
    }
}

bake.shouldRunAfter copyResources
htmlSanityCheck.shouldRunAfter bake
copyReports.shouldRunAfter htmlSanityCheck
defaultTasks 'copyResources', 'bake', 'htmlSanityCheck', 'copyReports', 'bakePreview'
