plugins {
    id "io.spring.dependency-management"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply from: "$rootDir/versions.gradle"
apply from: "$rootDir/git.gradle"

configurations {
    compileClasspath
}

import org.dukecon.plugin.*

task loc(type: LocTask) {
    directory = "$rootDir/android/app"
}


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("../keystores/apachecon/keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        compileSdkVersion 28

        multiDexEnabled = true
        vectorDrawables.useSupportLibrary = false

        def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
        def gitSha = gitHash()
        def shortVersionFromGitTag = shortVersionFromGitTag()
        def fullVersionFromGitTag = fullVersionFromGitTag()
        def numericVersionFromGitTag = numericVersionFromGitTag()

        versionName shortVersionFromGitTag
        versionCode = numericVersionFromGitTag

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "String", "FULL_VERSION", "\"${fullVersionFromGitTag}\""
        buildConfigField 'String', 'REVISION', "\"${gitVersionNumber()}\""

        println "Full Version: " + fullVersionFromGitTag
        println "Short Version: " + shortVersionFromGitTag
        println "Version code Version: " + versionCode
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
        debug {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-release-app.pro'
            signingConfig signingConfigs.release
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/common.kotlin_module'
        exclude 'META-INF/*.kotlin_module'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    flavorDimensions "sessionize"

    productFlavors {
        bedcon {
            dimension "sessionize"
            applicationIdSuffix ".bedcon"
        }
        apachecon {
            dimension "sessionize"
            applicationIdSuffix ".apachecon"
        }
        javaland {
            dimension "sessionize"
            applicationIdSuffix ".javaland"
        }
        macoun {
            dimension "sessionize"
            applicationIdSuffix ".macoun"
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {
    implementation project(':common:presentation')
    implementation project(':common:domain')
    implementation project(':common:data')

    apacheconApi project(':common:dukecon')
    bedconApi project(':common:sessionize')
    javalandApi project(':common:dukecon')
    macounApi project(':common:macoun')

    implementation "androidx.multidex:multidex:2.0.1"

    implementation 'com.github.tony19:logback-android'
    implementation 'javax.inject:javax.inject'
    implementation 'androidx.constraintlayout:constraintlayout'
    implementation 'androidx.cardview:cardview'
    implementation 'androidx.recyclerview:recyclerview'
    implementation 'com.google.dagger:dagger'
    implementation 'com.google.android.material:material'
    implementation "io.ktor:ktor-client-okhttp"
    implementation 'io.ktor:ktor-client-json-jvm'
    implementation "io.coil-kt:coil"
    implementation 'androidx.browser:browser'
    implementation 'com.squareup.okhttp3:logging-interceptor'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android'
    implementation "io.ktor:ktor-utils-jvm"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.50"

    kapt 'com.google.dagger:dagger-android-processor:2.22.1'
    kapt 'com.google.dagger:dagger-compiler:2.22.1'
    kapt 'org.greenrobot:eventbus-annotation-processor:3.1.1'


    androidTestImplementation 'androidx.test:rules'
    androidTestImplementation 'androidx.test:runner'
}

apply plugin: 'com.google.gms.google-services'

